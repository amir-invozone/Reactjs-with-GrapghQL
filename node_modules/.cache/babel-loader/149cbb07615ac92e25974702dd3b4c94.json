{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst GET_SINGLE_USER = gql`\n  query($userid: Int!) {\n    user(id: $userid) {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\nconst GET_USERS = gql`\n{\n    users {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\n\nfunction Users(user) {\n  _s();\n\n  console.log(user);\n  const {\n    loading,\n    error,\n    data\n  } = user.id !== undefined ? useQuery(GET_SINGLE_USER, {\n    variables: {\n      userid: parseInt(user.id, 10)\n    }\n  }) : useQuery(GET_USERS);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: \"5\",\n        children: [\"Error :(\", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (data.user) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, data.user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  } else if (data.user) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [data.Users.forEach(user => {\n        /*#__PURE__*/\n        _jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.user.age\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.user.jobs.company\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: data.user.jobs.duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 9\n          }, this)]\n        }, data.user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this);\n      }), \";\"]\n    }, void 0, true);\n  } // if (!data.user) {\n  //   return (\n  //     <tr>\n  //       <td colSpan=\"5\">No user found for this ID </td>\n  //     </tr>\n  //   );\n  // }\n\n}\n\n_s(Users, \"mn4J3+ExfyLz+EHcTadVPXTeWq4=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","useQuery","gql","GET_SINGLE_USER","GET_USERS","Users","user","console","log","loading","error","data","id","undefined","variables","userid","parseInt","message","name","age","jobs","company","duration","forEach"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_SINGLE_USER = gql`\n  query($userid: Int!) {\n    user(id: $userid) {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\nconst GET_USERS = gql`\n{\n    users {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\nfunction Users(user) {\n  console.log(user);\n  const { loading, error, data } = (user.id !== undefined)\n    ? useQuery(GET_SINGLE_USER, {\n      variables: { userid: parseInt(user.id, 10) },\n    })\n    : useQuery(GET_USERS);\n  if (loading) {\n    return (\n      <tr>\n        <td>Loading...</td>\n      </tr>\n    );\n  }\n  if (error) {\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          Error :(\n          {error.message}\n        </td>\n      </tr>\n    );\n  }\n  if (data.user) {\n    return (\n      <tr key={data.user.id}>\n        <td>{data.user.id}</td>\n        <td>{data.user.name}</td>\n        <td>{data.user.age}</td>\n        <td>{data.user.jobs.company}</td>\n        <td>{data.user.jobs.duration}</td>\n      </tr>\n    );\n  } else if (data.user) {\n    return (\n      <>\n      {data.Users.forEach(user => {\n        <tr key={data.user.id}>\n        <td>{data.user.id}</td>\n        <td>{data.user.name}</td>\n        <td>{data.user.age}</td>\n        <td>{data.user.jobs.company}</td>\n        <td>{data.user.jobs.duration}</td>\n      </tr>\n      })};\n      </>\n    );\n  }\n  // if (!data.user) {\n  //   return (\n  //     <tr>\n  //       <td colSpan=\"5\">No user found for this ID </td>\n  //     </tr>\n  //   );\n  // }\n}\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}