{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst GET_USERS = gql`\n  query($userid: Int!) {\n    user(id: $userid) {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\n\nfunction Users(user) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_USERS, {\n    variables: {\n      userid: parseInt(user.id, 10)\n    }\n  });\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: \"5\",\n        children: [\"Error :(\", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (data.user) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, data.user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!data.user) {\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        colSpan: \"5\",\n        children: \"No user found for this ID \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Users, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","useQuery","gql","GET_USERS","Users","user","loading","error","data","variables","userid","parseInt","id","message","name","age","jobs","company","duration"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,SAAS,GAAGD,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAaA,SAASE,KAAT,CAAeC,IAAf,EAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,SAAD,EAAY;AACnDM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEC,QAAQ,CAACN,IAAI,CAACO,EAAN,EAAU,EAAV;AAAlB;AADwC,GAAZ,CAAzC;;AAGA,MAAIN,OAAJ,EAAa;AACX,wBACE;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AACD,MAAIC,KAAJ,EAAW;AACT,wBACE;AAAA,6BACE;AAAI,QAAA,OAAO,EAAC,GAAZ;AAAA,+BAEGA,KAAK,CAACM,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AACD,MAAIL,IAAI,CAACH,IAAT,EAAe;AACb,wBACE;AAAA,8BACE;AAAA,kBAAKG,IAAI,CAACH,IAAL,CAAUO;AAAf;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAKJ,IAAI,CAACH,IAAL,CAAUS;AAAf;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,kBAAKN,IAAI,CAACH,IAAL,CAAUU;AAAf;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAA,kBAAKP,IAAI,CAACH,IAAL,CAAUW,IAAV,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJF,eAKE;AAAA,kBAAKT,IAAI,CAACH,IAAL,CAAUW,IAAV,CAAeE;AAApB;AAAA;AAAA;AAAA;AAAA,cALF;AAAA,OAASV,IAAI,CAACH,IAAL,CAAUO,EAAnB;AAAA;AAAA;AAAA;AAAA,YADF;AASD;;AACD,MAAI,CAACJ,IAAI,CAACH,IAAV,EAAgB;AACd,wBACE;AAAA,6BACE;AAAI,QAAA,OAAO,EAAC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;AACF;;GAvCQD,K;UAC0BH,Q;;;KAD1BG,K;AAwCT,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_USERS = gql`\n  query($userid: Int!) {\n    user(id: $userid) {\n      id\n      name\n      age\n      jobs {\n        company\n        duration\n      }\n    }\n  }\n`;\nfunction Users(user) {\n  const { loading, error, data } = useQuery(GET_USERS, {\n    variables: { userid: parseInt(user.id, 10) },\n  });\n  if (loading) {\n    return (\n      <tr>\n        <td>Loading...</td>\n      </tr>\n    );\n  }\n  if (error) {\n    return (\n      <tr>\n        <td colSpan=\"5\">\n          Error :(\n          {error.message}\n        </td>\n      </tr>\n    );\n  }\n  if (data.user) {\n    return (\n      <tr key={data.user.id}>\n        <td>{data.user.id}</td>\n        <td>{data.user.name}</td>\n        <td>{data.user.age}</td>\n        <td>{data.user.jobs.company}</td>\n        <td>{data.user.jobs.duration}</td>\n      </tr>\n    );\n  }\n  if (!data.user) {\n    return (\n      <tr>\n        <td colSpan=\"5\">No user found for this ID </td>\n      </tr>\n    );\n  }\n}\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}