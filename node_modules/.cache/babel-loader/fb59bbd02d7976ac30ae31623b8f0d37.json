{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst GET_USERS = gql`\n  query GetGreeting($userid: Int!) {\n        user(id: $userid) {\n        id\n        name\n        age\n        jobs{\n            company\n            duration\n        }\n        }\n  }\n`;\n\nfunction Hello() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_GREETING, {\n    variables: {\n      language: 'english'\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading ...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Hello \", data.greeting.message, \"!\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Hello, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", true);\n\n_c = Hello;\n\nconst User = Users => /*#__PURE__*/_jsxDEV(Query, {\n  query: gql`\n        {\n                user(id: Users) {\n                id\n                name\n                age\n                jobs{\n                    company\n                    duration\n                }\n                }\n            }\n    `,\n  children: ({\n    loading,\n    error,\n    data\n  }) => {\n    console.log(Users.id);\n    if (loading) return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 37\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 33\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: /*#__PURE__*/_jsxDEV(\"td\", {\n        children: \"Error :( \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 35\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }, this)]\n    }, data.user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 5\n}, this);\n\n_c2 = User;\nexport default User;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Hello\");\n$RefreshReg$(_c2, \"User\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","Query","gql","GET_USERS","Hello","loading","error","data","useQuery","GET_GREETING","variables","language","greeting","message","User","Users","console","log","id","user","name","age","jobs","company","duration"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,SAAS,GAAGD,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAaA,SAASE,KAAT,GAAiB;AAAA;;AACb,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BC,QAAQ,CAACC,YAAD,EAAe;AACtDC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,QAAQ,EAAE;AAAZ;AAD2C,GAAf,CAAzC;AAGA,MAAIN,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,sBAAO;AAAA,yBAAWE,IAAI,CAACK,QAAL,CAAcC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GANMT,K;;KAAAA,K;;AAOT,MAAMU,IAAI,GAAIC,KAAD,iBACT,QAAC,KAAD;AACI,EAAA,KAAK,EAAEb,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbI;AAAA,YAeK,CAAC;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC3BS,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,EAAlB;AACA,QAAIb,OAAJ,EAAa,oBAAO;AAAA,6BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA,6BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,YAAP;AACX,wBACI;AAAA,8BACI;AAAA,kBAAKC,IAAI,CAACY,IAAL,CAAUD;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKX,IAAI,CAACY,IAAL,CAAUC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAKb,IAAI,CAACY,IAAL,CAAUE;AAAf;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAKd,IAAI,CAACY,IAAL,CAAUG,IAAV,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAKhB,IAAI,CAACY,IAAL,CAAUG,IAAV,CAAeE;AAApB;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,OAASjB,IAAI,CAACY,IAAL,CAAUD,EAAnB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AA5BL;AAAA;AAAA;AAAA;AAAA,QADJ;;MAAMJ,I;AAgCN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_USERS = gql`\n  query GetGreeting($userid: Int!) {\n        user(id: $userid) {\n        id\n        name\n        age\n        jobs{\n            company\n            duration\n        }\n        }\n  }\n`;\nfunction Hello() {\n    const { loading, error, data } = useQuery(GET_GREETING, {\n      variables: { language: 'english' },\n    });\n    if (loading) return <p>Loading ...</p>;\n    return <h1>Hello {data.greeting.message}!</h1>;\n  }\nconst User = (Users) => (\n    <Query\n        query={gql`\n        {\n                user(id: Users) {\n                id\n                name\n                age\n                jobs{\n                    company\n                    duration\n                }\n                }\n            }\n    `}\n    >\n        {({ loading, error, data }) => {\n            console.log(Users.id);\n            if (loading) return <tr><td>Loading...</td></tr>;\n            if (error) return <tr><td>Error :( </td></tr>;\n            return (\n                <tr key={data.user.id}>\n                    <td>{data.user.id}</td>\n                    <td>{data.user.name}</td>\n                    <td>{data.user.age}</td>\n                    <td>{data.user.jobs.company}</td>\n                    <td>{data.user.jobs.duration}</td>\n                </tr>\n            );\n        }}\n    </Query>\n);\nexport default User;"]},"metadata":{},"sourceType":"module"}