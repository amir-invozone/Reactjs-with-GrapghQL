{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\";\nimport React from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nconst ApolloApp = AppComponent => /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(AppComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 5\n}, this);\n\n_c = ApolloApp;\nrender(ApolloApp(App), document.getElementById('root'));\n\nconst User = props => /*#__PURE__*/_jsxDEV(Query, {\n  query: gql`\n      {\n        user(id: props) {\n          id\n          name\n          age\n          jobs{\n              company\n              duration\n          }\n        }\n      }\n    `,\n  children: ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 33\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 31\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this)]\n    }, data.user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 5\n}, this);\n\n_c2 = User;\nexport default User;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ApolloApp\");\n$RefreshReg$(_c2, \"User\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","ApolloClient","ApolloProvider","Query","gql","client","uri","ApolloApp","AppComponent","render","App","document","getElementById","User","props","loading","error","data","user","id","name","age","jobs","company","duration"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,cAAzB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC5BK,EAAAA,GAAG,EAAE;AADuB,CAAjB,CAAf;;AAGA,MAAMC,SAAS,GAAGC,YAAY,iBAC1B,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAME,S;AAMJE,MAAM,CAACF,SAAS,CAACG,GAAD,CAAV,EAAiBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAAjB,CAAN;;AAEF,MAAMC,IAAI,GAAIC,KAAD,iBACT,QAAC,KAAD;AACI,EAAA,KAAK,EAAEV,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbI;AAAA,YAeK,CAAC;AAAEW,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC3B,QAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACX,wBACI;AAAA,8BACI;AAAA,kBAAKC,IAAI,CAACC,IAAL,CAAUC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKF,IAAI,CAACC,IAAL,CAAUE;AAAf;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAKH,IAAI,CAACC,IAAL,CAAUG;AAAf;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAKJ,IAAI,CAACC,IAAL,CAAUI,IAAV,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAKN,IAAI,CAACC,IAAL,CAAUM;AAAf;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,OAASP,IAAI,CAACC,IAAL,CAAUC,EAAnB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AA3BL;AAAA;AAAA;AAAA;AAAA,QADJ;;MAAMN,I;AA+BN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:4000/graphql\"\n});\nconst ApolloApp = AppComponent => (\n    <ApolloProvider client={client}>\n      <AppComponent />\n    </ApolloProvider>\n  );\n   \n  render(ApolloApp(App), document.getElementById('root'));\n\nconst User = (props) => (\n    <Query\n        query={gql`\n      {\n        user(id: props) {\n          id\n          name\n          age\n          jobs{\n              company\n              duration\n          }\n        }\n      }\n    `}\n    >\n        {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error :(</p>;\n            return (\n                <tr key={data.user.id}>\n                    <td>{data.user.id}</td>\n                    <td>{data.user.name}</td>\n                    <td>{data.user.age}</td>\n                    <td>{data.user.jobs.company}</td>\n                    <td>{data.user.duration}</td>\n                </tr>\n            );\n        }}\n    </Query>\n);\nexport default User;"]},"metadata":{},"sourceType":"module"}