{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\";\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst client = new ApolloClient({\n  uri: \"http://localhost:4000/graphql\"\n});\n\nconst User = props => /*#__PURE__*/_jsxDEV(Query, {\n  query: gql`\n      {\n        user(id: props) {\n          id\n          name\n          age\n          jobs{\n              company\n              duration\n          }\n        }\n      }\n    `,\n  children: ({\n    loading,\n    error,\n    data\n  }) => {\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 33\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error :( \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 31\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.age\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.jobs.company\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: data.user.duration\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this)]\n    }, data.user.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 17\n    }, this);\n  }\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 12,\n  columnNumber: 5\n}, this);\n\n_c = User;\nexport default User;\n\nvar _c;\n\n$RefreshReg$(_c, \"User\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","Query","gql","client","ApolloClient","uri","User","props","loading","error","data","user","id","name","age","jobs","company","duration"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,GAAT,QAAoB,cAApB;AAGA,MAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAiB;AAC5BC,EAAAA,GAAG,EAAE;AADuB,CAAjB,CAAf;;AAKA,MAAMC,IAAI,GAAIC,KAAD,iBACT,QAAC,KAAD;AACI,EAAA,KAAK,EAAEL,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAbI;AAAA,YAeK,CAAC;AAAEM,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,GAAD,KAA8B;AAC3B,QAAIF,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACb,QAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACX,wBACI;AAAA,8BACI;AAAA,kBAAKC,IAAI,CAACC,IAAL,CAAUC;AAAf;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKF,IAAI,CAACC,IAAL,CAAUE;AAAf;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAKH,IAAI,CAACC,IAAL,CAAUG;AAAf;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAKJ,IAAI,CAACC,IAAL,CAAUI,IAAV,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAKN,IAAI,CAACC,IAAL,CAAUM;AAAf;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,OAASP,IAAI,CAACC,IAAL,CAAUC,EAAnB;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;AA3BL;AAAA;AAAA;AAAA;AAAA,QADJ;;KAAMN,I;AA+BN,eAAeA,IAAf","sourcesContent":["import React from 'react';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\n\nconst client = new ApolloClient({\n    uri: \"http://localhost:4000/graphql\"\n});\n\n\nconst User = (props) => (\n    <Query\n        query={gql`\n      {\n        user(id: props) {\n          id\n          name\n          age\n          jobs{\n              company\n              duration\n          }\n        }\n      }\n    `}\n    >\n        {({ loading, error, data }) => {\n            if (loading) return <p>Loading...</p>;\n            if (error) return <p>Error :( </p>;\n            return (\n                <tr key={data.user.id}>\n                    <td>{data.user.id}</td>\n                    <td>{data.user.name}</td>\n                    <td>{data.user.age}</td>\n                    <td>{data.user.jobs.company}</td>\n                    <td>{data.user.duration}</td>\n                </tr>\n            );\n        }}\n    </Query>\n);\nexport default User;"]},"metadata":{},"sourceType":"module"}