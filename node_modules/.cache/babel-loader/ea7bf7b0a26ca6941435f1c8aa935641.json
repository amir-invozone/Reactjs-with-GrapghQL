{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/amir-invozone/training/react/react-with-graphql/src/Users.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nconst GET_USERS = gql`\n  query GetGreeting($userid: Int!) {\n        user(id: $userid) {\n        id\n        name\n        age\n        jobs{\n            company\n            duration\n        }\n        }\n  }\n`;\n\nfunction Users(user) {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_USERS, {\n    variables: {\n      userid: parseInt(user.id)\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 29\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: \"Error :( \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 27\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: data.user.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data.user.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data.user.age\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data.user.jobs.company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data.user.jobs.duration\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, data.user.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n} // const User = (Users) => (\n//     <Query\n//         query={gql`\n//         {\n//                 user(id: Users) {\n//                 id\n//                 name\n//                 age\n//                 jobs{\n//                     company\n//                     duration\n//                 }\n//                 }\n//             }\n//     `}\n//     >\n//         {({ loading, error, data }) => {\n//             console.log(Users.id);\n//             if (loading) return <tr><td>Loading...</td></tr>;\n//             if (error) return <tr><td>Error :( </td></tr>;\n//             return (\n//                 <tr key={data.user.id}>\n//                     <td>{data.user.id}</td>\n//                     <td>{data.user.name}</td>\n//                     <td>{data.user.age}</td>\n//                     <td>{data.user.jobs.company}</td>\n//                     <td>{data.user.jobs.duration}</td>\n//                 </tr>\n//             );\n//         }}\n//     </Query>\n// );\n\n\n_s(Users, \"OQZiY3KqWoytFPIJWw/H9Hrmbok=\", false, function () {\n  return [useQuery];\n});\n\n_c = Users;\nexport default Users;\n\nvar _c;\n\n$RefreshReg$(_c, \"Users\");","map":{"version":3,"sources":["/home/amir-invozone/training/react/react-with-graphql/src/Users.js"],"names":["React","useQuery","gql","GET_USERS","Users","user","loading","error","data","variables","userid","parseInt","id","name","age","jobs","company","duration"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;AAEA,MAAMC,SAAS,GAAGD,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAaA,SAASE,KAAT,CAAgBC,IAAhB,EAAsB;AAAA;;AAClB,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BP,QAAQ,CAACE,SAAD,EAAY;AACjDM,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEC,QAAQ,CAACN,IAAI,CAACO,EAAN;AAAlB;AADsC,GAAZ,CAAzC;AAGA,MAAIN,OAAJ,EAAa,oBAAO;AAAA,2BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA,2BAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,sBACI;AAAA,4BACI;AAAA,gBAAKC,IAAI,CAACH,IAAL,CAAUO;AAAf;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAKJ,IAAI,CAACH,IAAL,CAAUQ;AAAf;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA,gBAAKL,IAAI,CAACH,IAAL,CAAUS;AAAf;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAKN,IAAI,CAACH,IAAL,CAAUU,IAAV,CAAeC;AAApB;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI;AAAA,gBAAKR,IAAI,CAACH,IAAL,CAAUU,IAAV,CAAeE;AAApB;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA,KAAST,IAAI,CAACH,IAAL,CAAUO,EAAnB;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,C,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;GA/CSR,K;UAC4BH,Q;;;KAD5BG,K;AAgDT,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_USERS = gql`\n  query GetGreeting($userid: Int!) {\n        user(id: $userid) {\n        id\n        name\n        age\n        jobs{\n            company\n            duration\n        }\n        }\n  }\n`;\nfunction Users (user) {\n    const { loading, error, data } = useQuery(GET_USERS, {\n        variables: { userid: parseInt(user.id) },\n    });\n    if (loading) return <tr><td>Loading...</td></tr>;\n    if (error) return <tr><td>Error :( </td></tr>;\n    return (\n        <tr key={data.user.id}>\n            <td>{data.user.id}</td>\n            <td>{data.user.name}</td>\n            <td>{data.user.age}</td>\n            <td>{data.user.jobs.company}</td>\n            <td>{data.user.jobs.duration}</td>\n        </tr>\n    );\n}\n// const User = (Users) => (\n//     <Query\n//         query={gql`\n//         {\n//                 user(id: Users) {\n//                 id\n//                 name\n//                 age\n//                 jobs{\n//                     company\n//                     duration\n//                 }\n//                 }\n//             }\n//     `}\n//     >\n//         {({ loading, error, data }) => {\n//             console.log(Users.id);\n//             if (loading) return <tr><td>Loading...</td></tr>;\n//             if (error) return <tr><td>Error :( </td></tr>;\n//             return (\n//                 <tr key={data.user.id}>\n//                     <td>{data.user.id}</td>\n//                     <td>{data.user.name}</td>\n//                     <td>{data.user.age}</td>\n//                     <td>{data.user.jobs.company}</td>\n//                     <td>{data.user.jobs.duration}</td>\n//                 </tr>\n//             );\n//         }}\n//     </Query>\n// );\nexport default Users;"]},"metadata":{},"sourceType":"module"}